<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="./js/pixi.min.js"></script>
    <script src="./js/bump.js"></script>
    <script src="./Path Finding Algorithms/pacmangraph.js"></script>
    <script src="./Path Finding Algorithms/Dijkstra's_shortest_path.js"></script>
    <style>
        html {
            overflow: scroll;
            overflow-x: hidden;
        }

        canvas {
            display: block;
        }

        #MYAPP {
            position: absolute;
            overflow: hidden;
            top: 0%;
            left: 0%;
            width: 100%;
            height: 100%;
        }

        ::-webkit-scrollbar {
            width: 0;
            /* Remove scrollbar space */
            background: transparent;
            /* Optional: just make scrollbar invisible */
        }

        /* Optional: show position indicator in red */
        ::-webkit-scrollbar-thumb {
            background: #FF0000;
        }
    </style>
</head>

<body>
    <div id="MYAPP"></div>
    <script>
        let app = new PIXI.Application({ width: window.innerWidth, height: window.innerHeight, autoResize: true, resolution: 1 });
        document.body.appendChild(app.view);
        ctx = app.renderer.context.gl;
        var mouse = app.renderer.plugins.interaction.mouse.global;
        MouseX = mouse.x;
        MouseY = mouse.y;
        let GameContainer = new PIXI.Container();
        var Pacman = null
        PacManDirc = "ArrowRight"
        PacManRight = []
        PacManLeft = []
        var PixelData, collpixels
        PacManSpeed = window.innerWidth / 500
        PacManMouthRate_MSec = 10
        xmove = 0
        ymove = 0
        PacManUp = []
        lastcorner = null
        var PacManSpriteObj = null
        PacManDown = []
        colorline = []
        Coll2DMapArray = []
        PacmanGraphPosition = 0
        game_Char_Position = undefined
        pac_new_position = undefined
        enemy_new_position = undefined
        //448 *576
        var changeXmove = 0,changeYmove = 0,changePacManDirc  = "ArrowRight"
        const s = PIXI.Loader.shared.add("Gamemap", "/assets/Map/map.png")
            .add("PacmanRight_1", "./assets/Pacman/pacman-right/1.png")
            .add("PacmanRight_2", "./assets/Pacman/pacman-right/2.png")
            .add("PacmanRight_3", "./assets/Pacman/pacman-right/3.png")
            .add("PacmanLeft_1", "./assets/Pacman/pacman-left/1.png")
            .add("PacmanLeft_2", "./assets/Pacman/pacman-left/2.png")
            .add("PacmanLeft_3", "./assets/Pacman/pacman-left/3.png")
            .add("PacmanUp_1", "./assets/Pacman/pacman-up/1.png")
            .add("PacmanUp_2", "./assets/Pacman/pacman-up/2.png")
            .add("PacmanUp_3", "./assets/Pacman/pacman-up/3.png")
            .add("PacmanDown_1", "./assets/Pacman/pacman-down/1.png")
            .add("PacmanDown_2", "./assets/Pacman/pacman-down/2.png")
            .add("PacmanDown_3", "./assets/Pacman/pacman-down/3.png")
            .add("Enemy_blinky", "./assets/Enemy-Bot/blinky.png")
            .add("CollusionMap", "./assets/Map/CollusionMap2.png")

        function resize() {
            console.log("resize")
            const parent = app.view.parentNode;

            app.renderer.resize(parent.clientWidth, parent.clientHeight);

            Pacman.position.set(
                (GameMap.texture.width - 27) * scalefactorx / 2,
                (GameMap.texture.height + 240) * scalefactory / 2
            );
            Enemy_blinky.position.set(
                (GameMap.texture.width - 27) * scalefactorx / 2,
                (GameMap.texture.height - 148) * scalefactory / 2
            );
        }

        s.load(() => {
            GameMap = new PIXI.Sprite(PIXI.Loader.shared.resources.Gamemap.texture);
            scalefactorx = window.innerHeight / GameMap.texture.height;
            scalefactory = window.innerHeight / GameMap.texture.height;
            scalefactorx = parseFloat(scalefactorx.toFixed(2));
            scalefactory = parseFloat(scalefactory.toFixed(2));
            Pacman = new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanRight_1.texture)
            CollusionMap = new PIXI.Sprite(PIXI.Loader.shared.resources.CollusionMap.texture)
            Enemy_blinky = new PIXI.Sprite(PIXI.Loader.shared.resources.Enemy_blinky.texture);

            PacManRight.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanRight_1.texture));
            PacManRight.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanRight_2.texture));
            PacManRight.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanRight_3.texture));
            PacManLeft.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanLeft_1.texture));
            PacManLeft.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanLeft_2.texture));
            PacManLeft.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanLeft_3.texture));
            PacManUp.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanUp_1.texture));
            PacManUp.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanUp_2.texture));
            PacManUp.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanUp_3.texture));
            PacManDown.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanDown_1.texture));
            PacManDown.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanDown_2.texture));
            PacManDown.push(new PIXI.Sprite(PIXI.Loader.shared.resources.PacmanDown_3.texture));
            PacManSpriteObj = { "Pacman": [Pacman], "ArrowDown": PacManDown, "ArrowLeft": PacManLeft, "ArrowRight": PacManRight, "ArrowUp": PacManUp }
            collpixels = app.renderer.extract.pixels(CollusionMap)

            GameMap.scale.x *= scalefactorx
            GameMap.scale.y *= scalefactory
            CollusionMap.scale.x *= scalefactorx
            CollusionMap.scale.y *= scalefactory
            GameContainer.addChild(CollusionMap)

            Enemy_blinky.scale.x *= scalefactorx * 2
            Enemy_blinky.scale.y *= scalefactory * 2
            Enemy_blinkyRadius = Enemy_blinky.width / 2

            Enemy_saved_state = Enemy_blinky
            pac_dir_changed=false
            enemy_dir_changed=false
            Object.values(PacManSpriteObj).forEach((eachSpriteArray) => {
                eachSpriteArray.forEach((eachSprite) => {
                    eachSprite.scale.x *= scalefactorx * 2
                    eachSprite.scale.y *= scalefactory * 2
                    eachSprite.x = 100
                    eachSprite.y = 700

                })
            })


            for (i = 0; i <= collpixels.length; i += 4) {
                colorline.push(collpixels[i])
                if (colorline.length == 448) {
                    Coll2DMapArray.push(colorline)
                    colorline = []
                }
            }
            console.log(i)
            GameMap.x = 0
            GameMap.y = 0

            GameContainer.addChild(GameMap)
            PacmanRadius = Pacman.width / 2
            GameContainer.addChild(Pacman)
            GameContainer.addChild(Enemy_blinky)
            app.stage.addChild(GameContainer)

            resize();
            app.stage.addChild(graphic);
            app.ticker.add(gameLoop)


        })
        document.body.onkeydown = function changeDirection(key,Enemy_Dir_change) {
            if (Object.keys(PacManSpriteObj).includes(key.code)) {
                PacManDirc = key.code
                switch (PacManDirc) {
                    case "ArrowUp":
                       y_change = -PacManSpeed
                        x_change = 0
                        break
                    case "ArrowDown":
                       y_change = PacManSpeed
                        x_change = 0
                        break
                    case "ArrowRight":
                        x_change = PacManSpeed
                       y_change = 0
                        break
                    case "ArrowLeft":
                        x_change = -PacManSpeed
                       y_change = 0
                        break
                }
                if(Enemy_Dir_change ==undefined){
                    pac_dir_changed=true
                    pac_new_dir_x=x_change
                    pac_new_dir_y=y_change
                }

            }
            
        }
        let graphic = new PIXI.Graphics();
        timeElapsed = 0
        PacManSkinItrate = 0
        Pac_Move = false

        enemey_xmove = Math.abs(PacManSpeed)
        enemey_ymove = 0


        function gameLoop(delta) {
            timeElapsed += delta
            if (Pac_Move) {
                Enemy_saved_state = Pacman
                enemey_xmove = xmove
                enemey_ymove = ymove
                Pacman = Pacman_saved_state             //pacman move
                sprite_radius = PacmanRadius
                xmove = pacman_xmove
                ymove = pacman_ymove

            }
            else {
                Pacman_saved_state = Pacman
                pacman_xmove = xmove
                pacman_ymove = ymove
                Pacman = Enemy_saved_state              //move enemy
                // sprite_radius = Enemy_blinkyRadius
                sprite_radius = PacmanRadius
                xmove = enemey_xmove
                ymove = enemey_ymove

            }
            game_Char_Position = Coll2DMapArray[parseInt(((Pacman.y + sprite_radius) / scalefactory))][parseInt(((Pacman.x + sprite_radius) / scalefactorx))]
            if (game_Char_Position != 8 && game_Char_Position != undefined   ) {
                // console.log(game_Char_Position)
                if (Pac_Move && game_Char_Position != pac_new_position){
                    pac_new_position = game_Char_Position
                    if (enemy_new_position != undefined && pac_new_position != undefined) {
                        init(pac_new_position)
                        shortest_algo(pac_new_position, shortest_path[pac_new_position])
                        
                       console.log(shortest_path_way)
                    }             
                }
                 if(!Pac_Move && game_Char_Position !=  enemy_new_position) {
                    enemy_new_position = game_Char_Position
                    if (enemy_new_position != undefined && pac_new_position != undefined) {
                        init(pac_new_position)
                        shortest_algo(pac_new_position, shortest_path[pac_new_position])
                        
                       console.log(shortest_path_way)
                    }   
                }
            }
            // check if can change direction or go in same dir 

            if (pac_dir_changed || enemy_dir_changed) {
                //  console.log("aya")
                if (pac_dir_changed){
                    changeXmove=pac_new_dir_x
                    changeYmove=pac_new_dir_y
                }
                else{
                    changeXmove=enemy_new_dir_x
                    changeYmove=enemy_new_dir_y
                }
                oneymove = Math.sign(changeYmove)
                onexmove = Math.sign(changeXmove)
                for (i = 1; i <= parseInt(sprite_radius); i++) {
                    let can_go = Coll2DMapArray[parseInt((Pacman.y + sprite_radius + (oneymove * i)) / scalefactory)][parseInt((Pacman.x + sprite_radius + (onexmove * i)) / scalefactorx)]

                    if (i == parseInt(sprite_radius)) {
                        if(Pac_Move && pac_dir_changed){
                        xmove = changeXmove
                        ymove = changeYmove
                        changePacManDirc = PacManDirc
                        pac_dir_changed=false
                        }
                        if(!Pac_Move && enemy_dir_changed ){
                        xmove = changeXmove
                        ymove = changeYmove
                        changePacManDirc = PacManDirc
                        enemy_dir_changed=false
                        }
                        //console.log("1",[parseInt((Pacman.y + sprite_radius + (changeYmove * i)) / scalefactory)],[parseInt((Pacman.x + sprite_radius + (changeXmove * i)) / scalefactorx)],xmove,ymove,i)

                    }
                    if (can_go == 0) {
                        //console.log("2",[parseInt((Pacman.y + sprite_radius + (changeYmove * i)) / scalefactory)],[parseInt((Pacman.x + sprite_radius + (changeXmove * i)) / scalefactorx)],xmove,ymove,i)

                        break
                    }
                }
            }

            pacmanWay = Coll2DMapArray[parseInt((Pacman.y + sprite_radius + (ymove)) / scalefactory)][parseInt((Pacman.x + sprite_radius + (xmove)) / scalefactorx)]

            if (pacmanWay != 0) {
                //console.log(Pacman.x, Pacman.y)
                Pacman.x += xmove
                Pacman.y += ymove
            }
            else {
                //  console.log(xmove,ymove)

                oneymove = Math.sign(ymove)
                onexmove = Math.sign(xmove)
                //  console.log(onexmove,oneymove)

                while (lastcorner != 0 && lastcorner < 16) {
                    lastcorner = Coll2DMapArray[parseInt((Pacman.y + oneymove + sprite_radius) / scalefactory)][parseInt((Pacman.x + onexmove + sprite_radius) / scalefactorx)]
                    if (lastcorner != 0) {
                        Pacman.x += onexmove
                        Pacman.y += oneymove
                        //  console.log(lastcorner,[parseInt((Pacman.y+oneymove + sprite_radius ) / scalefactory)][parseInt((Pacman.x +onexmove+ sprite_radius ) / scalefactorx)])
                    }
                    else { lastcorner = null; break }

                }

            }
            if (Pac_Move) {
                if (timeElapsed > PacManMouthRate_MSec) {
                    if (PacManSkinItrate == 3)
                        PacManSkinItrate = 0
                    Pacman.texture = PacManSpriteObj[changePacManDirc][PacManSkinItrate].texture
                    PacManSkinItrate += 1
                    timeElapsed = 0
                }
            }
            Pac_Move = !Pac_Move
        }


    </script>
</body>

</html>